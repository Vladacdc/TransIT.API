// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransIT.DAL.Models;

namespace TransIT.API.Migrations
{
    [DbContext(typeof(TransITDBContext))]
    partial class TransITDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("IS_FIXED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__ACTION_T__D9C1FA00D8EDC403");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ACTION_TYPE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DocumentId")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<int?>("IssueId")
                        .HasColumnName("ISSUE_ID");

                    b.Property<decimal?>("Sum")
                        .HasColumnName("SUM")
                        .HasColumnType("decimal(20, 2)");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentId");

                    b.HasIndex("IssueId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BILL");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__COUNTRY__D9C1FA008FF4E681");

                    b.HasIndex("UpdatedById");

                    b.ToTable("COUNTRY");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FULL_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("SHORT_NAME")
                        .HasMaxLength(5);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasName("UQ__CURRENCY__F4E7E33EEBE730B7");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CURRENCY");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("IssueLogId")
                        .HasColumnName("ISSUE_LOG_ID");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("NewDate")
                        .HasColumnName("NEW_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PATH")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssueLogId");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasName("UQ_PATH_DOCUMENT");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DOCUMENT");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardNumber")
                        .HasColumnName("BOARD_NUMBER");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnName("MIDDLE_NAME")
                        .HasMaxLength(50);

                    b.Property<int>("PostId")
                        .HasColumnName("POST_ID");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("SHORT_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("BoardNumber")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEE_BOARD_NUMBER_UNIQUE");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEE_SHORT_NAME_UNIQUE");

                    b.HasIndex("UpdatedById");

                    b.ToTable("EMPLOYEE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToId")
                        .HasColumnName("ASSIGNED_TO");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATE")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnName("DEADLINE")
                        .HasColumnType("datetime");

                    b.Property<int?>("MalfunctionId")
                        .HasColumnName("MALFUNCTION_ID");

                    b.Property<int?>("Number")
                        .HasColumnName("NUMBER");

                    b.Property<int>("Priority")
                        .HasColumnName("PRIORITY");

                    b.Property<int?>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATE_ID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Summary")
                        .HasColumnName("SUMMARY");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("VehicleId")
                        .HasColumnName("VEHICLE_ID");

                    b.Property<int?>("Warranty")
                        .HasColumnName("WARRANTY");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MalfunctionId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("ISSUE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.IssueLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionTypeId")
                        .HasColumnName("ACTION_TYPE_ID");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("Expenses")
                        .HasColumnName("EXPENSES")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("IssueId")
                        .HasColumnName("ISSUE_ID");

                    b.Property<int?>("NewStateId")
                        .HasColumnName("NEW_STATE_ID");

                    b.Property<int?>("OldStateId")
                        .HasColumnName("OLD_STATE_ID");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SUPPLIER_ID");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssueId");

                    b.HasIndex("NewStateId");

                    b.HasIndex("OldStateId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ISSUE_LOG");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LOCATION");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Malfunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MalfunctionSubgroupId")
                        .HasColumnName("MALFUNCTION_SUBGROUP_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MalfunctionSubgroupId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MALFUNCTION");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.MalfunctionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MALFUNCTION_GROUP");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.MalfunctionSubgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MalfunctionGroupId")
                        .HasColumnName("MALFUNCTION_GROUP_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MalfunctionGroupId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MALFUNCTION_SUBGROUP");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__POST__D9C1FA00297EABB2")
                        .HasFilter("[NAME] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.ToTable("POST");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("IS_FIXED");

                    b.Property<string>("ModId");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("TransName")
                        .HasColumnName("TRANS_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreateId");

                    b.HasIndex("ModId");

                    b.HasIndex("TransName")
                        .IsUnique()
                        .HasName("UQ_STATE_TRANS_NAME")
                        .HasFilter("[TRANS_NAME] IS NOT NULL");

                    b.ToTable("STATE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnName("COUNTRY");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrencyId")
                        .HasColumnName("CURRENCY");

                    b.Property<string>("Edrpou")
                        .IsRequired()
                        .HasColumnName("EDRPOU")
                        .HasMaxLength(14);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FULL_NAME")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__SUPPLIER__D9C1FA0021944BFA");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SUPPLIER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Transition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionTypeId")
                        .HasColumnName("ACTION_TYPE_ID");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FromStateId")
                        .HasColumnName("FROM_STATE_ID");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("IS_FIXED");

                    b.Property<int>("ToStateId")
                        .HasColumnName("TO_STATE_ID");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ToStateId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("FromStateId", "ActionTypeId", "ToStateId")
                        .IsUnique()
                        .HasName("CK_ISSUE_TRANSITION_UNIQUE");

                    b.ToTable("TRANSITION");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName")
                        .HasColumnName("MIDDLE_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("BRAND")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CommissioningDate")
                        .HasColumnName("COMMISSIONING_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InventoryId")
                        .HasColumnName("INVENTORY_ID")
                        .HasMaxLength(40);

                    b.Property<int?>("LocationId")
                        .HasColumnName("LOCATION_ID");

                    b.Property<string>("Model")
                        .HasColumnName("MODEL")
                        .HasMaxLength(50);

                    b.Property<string>("RegNum")
                        .HasColumnName("REG_NUM")
                        .HasMaxLength(15);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnName("VEHICLE_TYPE_ID");

                    b.Property<string>("Vincode")
                        .IsRequired()
                        .HasColumnName("VINCODE")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnName("WARRANTY_END_DATE")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("Vincode")
                        .IsUnique()
                        .HasName("UQ_VINCODE_UNIQUE");

                    b.ToTable("VEHICLE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__VEHICLE___D9C1FA0095358636");

                    b.HasIndex("UpdatedById");

                    b.ToTable("VEHICLE_TYPE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CREATE_ID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransName")
                        .HasColumnName("TRANS_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TransName")
                        .IsUnique()
                        .HasName("UQ_ROLE_TRANS_NAME")
                        .HasFilter("[TRANS_NAME] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TransIT.DAL.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.ActionType", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("ActionTypeCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_ACTION_TYPE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("ActionTypeMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_ACTION_TYPE_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Bill", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("BillCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_BILL_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Document", "Document")
                        .WithMany("Bill")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_BILL_DOCUMENT");

                    b.HasOne("TransIT.DAL.Models.Entities.Issue", "Issue")
                        .WithMany("Bill")
                        .HasForeignKey("IssueId")
                        .HasConstraintName("FK_BILL_ISSUE");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("BillMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_BILL_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Country", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("CountryCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_COUNTRY_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("CountryMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_COUNTRY_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Currency", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("CurrencyCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_CURRENCY_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("CurrencyMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_CURRENCY_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Document", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("DocumentCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_DOCUMENT_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.IssueLog", "IssueLog")
                        .WithMany("Document")
                        .HasForeignKey("IssueLogId")
                        .HasConstraintName("FK_DOCUMENT_ISSUE_LOG");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("DocumentMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_DOCUMENT_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Employee", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("EmployeeCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_MOD_EMPLOYEE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Post", "Post")
                        .WithMany("Employee")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_EMPLOYEE_POST");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("EmployeeMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_EMPLOYEE_ROLE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Issue", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.Employee", "AssignedTo")
                        .WithMany("Issue")
                        .HasForeignKey("AssignedToId");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("IssueCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_ISSUE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Malfunction", "Malfunction")
                        .WithMany("Issue")
                        .HasForeignKey("MalfunctionId")
                        .HasConstraintName("FK_ISSUE_MALFUNCTION");

                    b.HasOne("TransIT.DAL.Models.Entities.State", "State")
                        .WithMany("Issue")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_ISSUE_STATE");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("IssueMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_ISSUE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("Issue")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_ISSUE_VEHICLE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.IssueLog", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.ActionType", "ActionType")
                        .WithMany("IssueLog")
                        .HasForeignKey("ActionTypeId")
                        .HasConstraintName("FK_ISSUE_LOG_ACTION_TYPE");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("IssueLogCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_ISSUE_LOG_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Issue", "Issue")
                        .WithMany("IssueLog")
                        .HasForeignKey("IssueId")
                        .HasConstraintName("FK_ISSUE_LOG_ISSUE");

                    b.HasOne("TransIT.DAL.Models.Entities.State", "NewState")
                        .WithMany("IssueLogNewState")
                        .HasForeignKey("NewStateId")
                        .HasConstraintName("FK_NEW_ISSUE_LOG_STATE");

                    b.HasOne("TransIT.DAL.Models.Entities.State", "OldState")
                        .WithMany("IssueLogOldState")
                        .HasForeignKey("OldStateId")
                        .HasConstraintName("FK_OLD_ISSUE_LOG_STATE");

                    b.HasOne("TransIT.DAL.Models.Entities.Supplier", "Supplier")
                        .WithMany("IssueLog")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_ISSUE_LOG_SUPPLIER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("IssueLogMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_ISSUE_LOG_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Location", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("LocationCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_LOCATION_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("LocationMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_LOCATION_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Malfunction", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("MalfunctionCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_MALFUNCTION_ROLE");

                    b.HasOne("TransIT.DAL.Models.Entities.MalfunctionSubgroup", "MalfunctionSubgroup")
                        .WithMany("Malfunction")
                        .HasForeignKey("MalfunctionSubgroupId")
                        .HasConstraintName("FK_MALFUNCTION_SUBGROUP_MALFUNCTION_SUBGROUP");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("MalfunctionMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_MALFUNCTION_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.MalfunctionGroup", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("MalfunctionGroupCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK__MALFUNCTI__CREAT__73BA3083");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("MalfunctionGroupMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK__MALFUNCTI__MOD_I__74AE54BC");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.MalfunctionSubgroup", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("MalfunctionSubgroupCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_MALFUNCTION_SUBGROUP_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.MalfunctionGroup", "MalfunctionGroup")
                        .WithMany("MalfunctionSubgroup")
                        .HasForeignKey("MalfunctionGroupId")
                        .HasConstraintName("FK_MALFUNCTION_SUBGROUP_MALFUNCTION_GROUP");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("MalfunctionSubgroupMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_MALFUNCTION_SUBGROUP_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Post", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("PostCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_MOD_POST_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("PostMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_POST_ROLE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.State", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany()
                        .HasForeignKey("CreateId");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany()
                        .HasForeignKey("ModId");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Supplier", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.Country", "Country")
                        .WithMany("Supplier")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("SupplierCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_SUPPLIER_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Currency", "Currency")
                        .WithMany("Supplier")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Currency");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("SupplierMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_SUPPLIER_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Transition", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.ActionType", "ActionType")
                        .WithMany("Transition")
                        .HasForeignKey("ActionTypeId")
                        .HasConstraintName("FK_ACTION_TYPE_ISSUE");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("TransitionCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_ISSUE_TRANSITION_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.State", "FromState")
                        .WithMany("TransitionFromState")
                        .HasForeignKey("FromStateId")
                        .HasConstraintName("FK_FROM_STATE");

                    b.HasOne("TransIT.DAL.Models.Entities.State", "ToState")
                        .WithMany("TransitionToState")
                        .HasForeignKey("ToStateId")
                        .HasConstraintName("FK_TO_STATE");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("TransitionMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_ISSUE_TRANSITION_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.User", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "CreatedBy")
                        .WithMany("InverseCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "ModifiedBy")
                        .WithMany("InverseMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_USER");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("VehicleCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_MOD_VEHICLE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.Location", "Location")
                        .WithMany("Vehicle")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_VEHICLE_LOCATION");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("VehicleMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_VEHICLE_ROLE");

                    b.HasOne("TransIT.DAL.Models.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("FK_VEHICLE_VEHICLE_TYPE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.VehicleType", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("VehicleTypeCreate")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_MOD_VEHICLE_TYPE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("VehicleTypeMod")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_VEHICLE_TYPE_ROLE");
                });

            modelBuilder.Entity("TransIT.DAL.Models.Entities.Role", b =>
                {
                    b.HasOne("TransIT.DAL.Models.Entities.User", "Create")
                        .WithMany("RoleCreatedByNavigation")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CREATE_ROLE_USER");

                    b.HasOne("TransIT.DAL.Models.Entities.User", "Mod")
                        .WithMany("RoleModifiedByNavigation")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_MOD_ROLE_USER");
                });
#pragma warning restore 612, 618
        }
    }
}
